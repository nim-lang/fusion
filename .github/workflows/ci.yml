name: Fusion CI
on: [push, pull_request]

jobs:
  build:
    if: |
      !contains(format('{0} {1}', github.event.head_commit.message, github.event.pull_request.title), '[skip ci]')

    strategy:
      fail-fast: false
      matrix:
        branch: [version-1-0, version-1-2, version-1-4, devel]
        target:
          - os: linux
            cpu: amd64
          - os: linux
            cpu: i386
          - os: macos
            cpu: amd64
          - os: windows
            cpu: i386
          - os: windows
            cpu: amd64
        include:
          - target:
              os: linux
            builder: ubuntu-18.04
          - target:
              os: macos
            builder: macos-10.15
          - target:
              os: windows
            builder: windows-2019
    name: '${{ matrix.target.os }}-${{ matrix.target.cpu }} (${{ matrix.branch }})'
    runs-on: ${{ matrix.builder }}
    steps:
      - name: Checkout fusion
        uses: actions/checkout@v2
        with:
          path: fusion

      # - name: Install dependencies (Linux amd64)
      #   if: runner.os == 'Linux' && matrix.target.cpu == 'amd64'
      #   run: |
      #     sudo DEBIAN_FRONTEND='noninteractive' apt-fast install \
      #       --no-install-recommends -yq <packages here>

      - name: Install dependencies (Linux i386)
        if: runner.os == 'Linux' && matrix.target.cpu == 'i386'
        run: |
          sudo dpkg --add-architecture i386
          sudo apt-fast update -qq
          sudo DEBIAN_FRONTEND='noninteractive' apt-fast install \
            --no-install-recommends -yq gcc-multilib g++-multilib \
            libssl-dev:i386

          mkdir -p external/bin
          cat << EOF > external/bin/gcc
          #!/bin/bash

          exec $(which gcc) -m32 "\$@"
          EOF

          cat << EOF > external/bin/g++
          #!/bin/bash

          exec $(which g++) -m32 "\$@"
          EOF

          chmod 755 external/bin/gcc external/bin/g++

          echo "${{ github.workspace }}/external/bin" >> "${GITHUB_PATH}"

      # - name: Install dependencies (macOS)
      #   if: runner.os == 'macOS'
      #   run: brew install <packages here>

      - name: Install dependencies (Windows)
        if: runner.os == 'Windows'
        shell: bash
        run: |
          mkdir external
          if [[ '${{ matrix.target.cpu }}' == 'amd64' ]]; then
            arch=64
          else
            arch=32
          fi
          curl -L "https://nim-lang.org/download/mingw$arch-6.3.0.7z" -o "external/mingw$arch.7z"
          curl -L "https://nim-lang.org/download/windeps.zip" -o external/windeps.zip
          7z x "external/mingw$arch.7z" -oexternal/
          7z x external/windeps.zip -oexternal/dlls

          echo "${{ github.workspace }}/external/mingw$arch/bin" >> "${GITHUB_PATH}"
          echo "${{ github.workspace }}/external/dlls" >> "${GITHUB_PATH}"

      - name: Setup environment
        shell: bash
        run: echo "${{ github.workspace }}/nim/bin" >> "${GITHUB_PATH}"

      - name: Get latest Nim commit hash
        id: versions
        shell: bash
        run: |
          getHash() {
            git ls-remote "https://github.com/$1" "${2:-HEAD}" | cut -f 1
          }
          nimHash=$(getHash nim-lang/Nim '${{ matrix.branch }}')
          csourcesHash=$(getHash nim-lang/csources)
          echo "::set-output name=nim::$nimHash"
          echo "::set-output name=csources::$csourcesHash"

      - name: Restore prebuilt Nim from cache
        id: nim-cache
        uses: actions/cache@v1
        with:
          path: nim
          key: 'nim-${{ matrix.target.os }}-${{ matrix.target.cpu }}-${{ steps.versions.outputs.nim }}'

      - name: Restore prebuilt csources from cache
        if: steps.nim-cache.outputs.cache-hit != 'true'
        id: csources-cache
        uses: actions/cache@v1
        with:
          path: csources/bin
          key: 'csources-${{ matrix.target.os }}-${{ matrix.target.cpu }}-${{ steps.versions.outputs.csources }}'

      - name: Checkout Nim csources
        if: >
          steps.csources-cache.outputs.cache-hit != 'true' &&
          steps.nim-cache.outputs.cache-hit != 'true'
        uses: actions/checkout@v2
        with:
          repository: nim-lang/csources
          path: csources
          ref: ${{ steps.versions.outputs.csources }}

      - name: Checkout Nim
        if: steps.nim-cache.outputs.cache-hit != 'true'
        uses: actions/checkout@v2
        with:
          repository: nim-lang/Nim
          path: nim
          ref: ${{ steps.versions.outputs.nim }}

      - name: Build Nim and associated tools
        if: steps.nim-cache.outputs.cache-hit != 'true'
        shell: bash
        run: |
          ncpu=
          ext=
          case '${{ runner.os }}' in
          'Linux')
            ncpu=$(nproc)
            ;;
          'macOS')
            ncpu=$(sysctl -n hw.ncpu)
            ;;
          'Windows')
            ncpu=$NUMBER_OF_PROCESSORS
            ext=.exe
            ;;
          esac
          [[ -z "$ncpu" || $ncpu -le 0 ]] && ncpu=1

          if [[ ! -e csources/bin/nim$ext ]]; then
            make -C csources -j $ncpu CC=gcc ucpu='${{ matrix.target.cpu }}'
          else
            echo 'Using prebuilt csources'
          fi
          cp -v csources/bin/nim$ext nim/bin

          cd nim
          nim c koch
          ./koch boot -d:release
          ./koch tools -d:release
          # clean up to save cache space
          rm koch
          rm -rf nimcache
          rm -rf dist
          rm -rf .git

      - name: Run fusion tests
        shell: bash
        run: |
          cd fusion
          nimble test

      - name: docs
        if: matrix.branch == 'devel'
        run: |
          cd fusion
          nimble docs

      - name: Deploy docs
        # to view docs on your own fork: push a gh-pages branch on your fork,
        # enable gh-pages in your fork
        # and remove `github.ref == 'refs/heads/master'` below
        if: |
          github.event_name == 'push' && github.ref == 'refs/heads/master' &&
          matrix.target.os == 'linux' && matrix.target.cpu == 'amd64' &&
          matrix.branch == 'devel'
        uses: crazy-max/ghaction-github-pages@v1
        with:
          build_dir: fusion/htmldocs
          target_branch: gh-pages
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
